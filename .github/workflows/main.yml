name: "Terraform action"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: "us-east-1" #Change to reflect your Region
jobs:
  docker-creation:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3    

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: arn:aws:iam::644107485976:role/github_actions_role #change to reflect your IAM role‚Äôs ARN
            role-session-name: GitHub_to_AWS_via_FederatedOIDC
            aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.7.0
        with:
          mask-password: 'true'
  
      - name: Build and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nodeapp
          IMAGE_TAG: latest
        run: |
          echo $ECR_REGISTRY  && echo $ECR_REPOSITORY && echo $IMAGE_TAG
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [docker-creation]
    # outputs:
    #   ec2public_ip: ${{ steps.set-ip.outputs.public_ip }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::644107485976:role/github_actions_role #change to reflect your IAM role‚Äôs ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2


      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: "tf-state-manu16082023"
          AWS_BUCKET_KEY_NAME: "remote-state"
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${{env.AWS_BUCKET_KEY_NAME}}" -backend-config="region=${{env.AWS_REGION}}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Output
        run: terraform-bin output -json  | jq  -r '.ec2_private_key.value' > ec2_private.pem

      - name: Set Output
        id: set-ip
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "EC2PUBLICIP=$(terraform-bin output  -json | jq  -r '.ec2_public_ip.value[0]')" >> $GITHUB_ENV
          echo "EC2PRIVKEY="$(terraform-bin output  -json | jq  '.ec2_private_key.value')"" >> $GITHUB_ENV

      - name: Use the value
        id: step_two
        run: |
          echo "${{ env.EC2PUBLICIP }}"  
          echo "${{ env.EC2PRIVKEY }}"   


      - name: SSH Action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2PUBLICIP }}
          username: "ubuntu"
          key_path:  ec2_private.pem
          port: "22"
          script: |
            whoami
            docker run --rm --name app_deploy -p 3000:3000 644107485976.dkr.ecr.us-east-1.amazonaws.com/nodeapp:latest &

  pull-docker-image:
    runs-on: ubuntu-latest
    needs: [deploy]
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Use the value
        id: step_two
        run: |
          echo "${{ env.EC2PUBLICIP }}"
    # steps:
    #   - name: SSH Action
    #     uses: appleboy/ssh-action@v1.0.0
    #     with:
    #       host: ${{ secrets.HOST }}
    #       username: ${{ secrets.USERNAME }}
    #       key: ${{ secrets.KEY }}
    #       port: ${{ secrets.PORT }}
    #       script: whoami
